'''
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
'''

import os
from distutils.util import strtobool
from pathlib import Path

import dj_database_url
from django_extensions.utils import InternalIPS

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = strtobool(os.getenv('DEBUG', 'false'))

ALLOWED_HOSTS = [
    host
    for host in os.getenv('ALLOWED_HOSTS', '').split(',')
    if host
]

if DEBUG:
    INTERNAL_IPS = InternalIPS([
        '10.0.0.0/8',
        '172.16.0.0/12',
        '192.168.0.0/16',
    ])


# Application definition

INSTALLED_APPS = [
    # apps
    'uri',

    # accounts
    'accounts',

    # Django Mail Auth https://django-mail-auth.readthedocs.io/
    'mailauth',

    'mailauth.contrib.admin',
    'mailauth.contrib.user',

    # Django-Flags https://cfpb.github.io/django-flags/
    'flags',

    # admin
    # 'admin_honeypot',
    'django.contrib.admin',

    # auth
    'allauth',
    'allauth.account',
    'django.contrib.auth',

    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
if DEBUG:
    INSTALLED_APPS += [
        'debug_toolbar',
    ]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
if DEBUG:
    MIDDLEWARE += [
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    ]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

conn_max_age = int(os.environ.get('CONN_MAX_AGE', 600))
db_ssl_required = not DEBUG
db_config = dj_database_url.config(
    # engine='django_tenants.postgresql_backend',
    conn_max_age=conn_max_age, ssl_require=db_ssl_required)
DATABASES = {
    'default': dict(
        db_config,
        # PASSWORD=os.getenv('RDB_PASSWORD') or db_config.get('PASSWORD'),
    ),
}


# Email
if DEBUG:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    EMAIL_BACKEND = 'sendgrid_backend.SendgridBackend'
    SENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')
    SENDGRID_TRACK_CLICKS_PLAIN = False
    SENDGRID_SANDBOX_MODE_IN_DEBUG = False
    if (_default_from_email := os.getenv('DEFAULT_FROM_EMAIL')):
        DEFAULT_FROM_EMAIL = _default_from_email


# ユーザ認証系
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
    'mailauth.backends.MailAuthBackend',
)

AUTH_USER_MODEL = 'accounts.User'

# ユーザーネームは使わない
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
# 認証にはメールアドレスを使用する
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
# ログイン後のリダイレクト先を指定
LOGIN_REDIRECT_URL = '/'
# ログアウト後のリダイレクト先
ACCOUNT_LOGOUT_REDIRECT_URL = '/'
# メールアドレスが確認済みである必要がある
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # noqa: E501
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # noqa: E501
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # noqa: E501
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # noqa: E501
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'ja-jp'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# LOGGING

# Support for X-Request-ID
# https://devcenter.heroku.com/ja/articles/http-request-id#usage-with-django
LOG_REQUEST_ID_HEADER = 'HTTP_X_REQUEST_ID'
LOG_REQUESTS = True
GENERATE_REQUEST_ID_IF_NOT_IN_HEADER = True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'request_id': {
            '()': 'log_request_id.filters.RequestIDFilter'
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}] {message}',
            'style': '{',
        },
        'standard': {
            'format': '%(levelname)-8s [%(asctime)s] [%(request_id)s] %(name)s:%(lineno)s %(funcName)s %(message)s',  # noqa: E501
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
            'filters': ['request_id'],
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        # 'rq_console': {
        #     'level': 'DEBUG',
        #     'class': 'rq.utils.ColorizingStreamHandler',
        #     'formatter': 'standard',
        #     'exclude': ['%(asctime)s'],
        #     'filters': ['request_id'],
        # },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'django.server': {
            'handlers': ['django.server'],
            'level': 'INFO',
            'propagate': False,
        },
        'log_request_id.middleware': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        # 'rq.worker': {
        #     'handlers': ['rq_console'],
        #     'level': 'DEBUG' if DEBUG else 'INFO',
        #     'propagate': False,
        # },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG' if DEBUG else 'INFO',
    },
}


# https://github.com/sbdchd/django-types
if True:
    from django.db.models import ForeignKey
    from django.db.models.query import QuerySet

    # NOTE: there are probably other items you'll need to monkey patch
    # depending on your version.
    for cls in [QuerySet, ForeignKey]:
        cls.__class_getitem__ = classmethod(  # type: ignore [attr-defined]
            lambda cls, *args, **kwargs: cls)
